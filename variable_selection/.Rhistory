vif(f1)
par(mfrow=c(2,2))
plot(f1)
test.17 <- df17[c(1,8,16,36,42)]
test.17$predSalary <- predict(f1,test.17)
test.17 <- df17[c(1,6,36,18,24,4,42)]
test.17$predSalary <- predict(f1,test.17)
test.17$actCluster <- apply(test.17[5],2,clus17_18)
test.17$predCluster <- apply(test.17[6],2,clus17_18)
test.17$onOff <- test.17$predCluster - test.17$actCluster
row.names(test.17) <- 1:nrow(test.17)
sum(abs(test.17$onOff))/nrow(test.17)
test.17 <- df17[c(1,6,36,18,24,4,42)]
test.17$predSalary <- predict(f1,test.17)
test.17$actCluster <- apply(test.17[5],2,clus17_18)
test.17$predCluster <- apply(test.17[6],2,clus17_18)
test.17$onOff <- test.17$predCluster - test.17$actCluster
row.names(test.17) <- 1:nrow(test.17)
test.17 <- df17[c(1,6,36,18,24,4,42)]
test.17$predSalary <- predict(f1,test.17)
test.17$actCluster <- apply(test.17[6],2,clus17_18)
test.17$predCluster <- apply(test.17[7],2,clus17_18)
test.17$onOff <- test.17$predCluster - test.17$actCluster
row.names(test.17) <- 1:nrow(test.17)
sum(abs(test.17$onOff))/nrow(test.17)
test.17 <- df17[c(1,6,36,18,24,4,42)]
test.17$predSalary <- predict(f1,test.17)
test.17$actCluster <- apply(test.17[7],2,clus17_18)
test.17$predCluster <- apply(test.17[8],2,clus17_18)
test.17$onOff <- test.17$predCluster - test.17$actCluster
row.names(test.17) <- 1:nrow(test.17)
sum(abs(test.17$onOff))/nrow(test.17)
sum(abs(test.17$predSalary - test.17$average.salary))/nrow(test.17)
#install.packages("pls")
library(ggplot2)
library(ISLR)
library(readr)
nba.t=transform(df,sqSal=sqrt(average.salary))
nba.t=subset(nba.t,select=-c(average.salary,fix,Tm,Pos))
head(nba.t)
attach(nba.t)
X = nba.t[,-c(40)]
head(X)
out.pc = princomp(X, cor = F) # does same thing as standardizing variables
summary(out.pc)
out.pc$loadings
plot(out.pc)
set.seed(42) # for cross validation
library(pls)
pcr.fit = pcr(sqSal~., data=nba.t, scale = F, validation = "CV")
summary(pcr.fit)
#nba.t=transform(df,sqSal=sqrt(average.salary))
nba.t=subset(nba.t,select=-c(average.salary,fix,Tm,Pos))
nba.t = df
nba.t=subset(nba.t,select=-c(average.salary,fix,Tm,Pos))
head(nba.t)
attach(nba.t)
X = nba.t[,-c(40)]
head(X)
out.pc = princomp(X, cor = F) # does same thing as standardizing variables
summary(out.pc)
out.pc$loadings
plot(out.pc)
set.seed(42) # for cross validation
library(pls)
pcr.fit = pcr(sqSal~., data=nba.t, scale = F, validation = "CV")
summary(pcr.fit)
validationplot(pcr.fit, val.type="MSEP")
pcr.9pc = pcr(sqSal~., data=nba.t, scale = T, ncomp = 9)
summary(pcr.9pc)
pcr.9pc$loadings
predplot(pcr.9pc)
coefplot(pcr.9pc)
bm17s <- regsubsets(sqrt(average.salary) ~ FG + PS.G + FGA + MP + FTA + FT + WS + VORP + TOV + PER + OWS + DRB + GS + BPM + OBPM + DWS + USG. + TRB + STL + WS.48 + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
bm17s.sum <- summary(bm17s)
res.legend <-subsets(bm17s, statistic="adjr2", legend = FALSE, min.size = 3, max.size = 12, main = "Adjusted R^2")
which(bm17s.sum$which[5,] == TRUE)
which(bm17s.sum$which[6,] == TRUE)
w1 <- lm(sqrt(average.salary) ~ MP + WS + STL + TS. + G + ORB.,df17)
summary(w1)
vif(w1)
which(bm17s.sum$which[7,] == TRUE)
which(bm17s.sum$which[8,] == TRUE)
w2 <- lm(sqrt(average.salary) ~ PS.G + MP + FT + WS + STL + TS. + G + FTr,df17)
summary(w2)
vif(w2)
which(bm17s.sum$which[7,] == TRUE)
w2 <- lm(sqrt(average.salary) ~ FGA + WS + DRB + TRB + AST + ORB + AST.,df17)
summary(w2)
vif(w2)
which(bm17s.sum$which[6,] == TRUE)
w1 <- lm(sqrt(average.salary) ~ MP + WS + STL + TS. + G + ORB.,df17)
summary(w1)
vif(w1)
par(mfrow=c(2,2))
plot(w1)
test.17.t <- df17[c(1,6,36,18,24,4,26,42)]
test.17.t$predSalary <- predict(w1,test.17.t)^2
test.17.t$actCluster <- apply(test.17.t[7],2,clus17_18)
test.17.t$predCluster <- apply(test.17.t[8],2,clus17_18)
test.17.t$onOff <- test.17.t$predCluster - test.17.t$actCluster
row.names(test.17.t) <- 1:nrow(test.17.t)
View(test.17.t)
test.17.t <- df17[c(1,6,36,18,24,4,26,42)]
test.17.t$predSalary <- predict(w1,test.17.t)^2
test.17.t$actCluster <- apply(test.17.t[8],2,clus17_18)
test.17.t$predCluster <- apply(test.17.t[9],2,clus17_18)
test.17.t$onOff <- test.17.t$predCluster - test.17.t$actCluster
row.names(test.17.t) <- 1:nrow(test.17.t)
paste0("Error by cluster: ",sum(abs(test.17$onOff))/nrow(test.17))
paste0("Error by pay: ",sum(abs(test.17$predSalary - test.17$average.salary))/nrow(test.17))
nba.t2 = transform(df17,sqSal = sqrt(average.salary))
nba.t2=subset(nba.t2,select=-c(average.salary,fix,Tm,Pos))
head(nba.t2)
attach(nba.t2)
detach(nba.t)
detach(nba.t)
detach(nba.t)
detach(nba.t2)
detach(nba.t2)
attach(nba.t2)
X = nba.t2[,-c(40)]
head(X)
X = nba.t2[,-c(39,40)]
head(X)
out.pc = princomp(X, cor = F) # does same thing as standardizing variables
summary(out.pc)
predplot(out.pc)
out.pc$loadings
set.seed(42) # for cross validation
pcr.fit = pcr(sqSal~., data=nba.t2, scale = F, validation = "CV")
summary(pcr.fit)
pcr.9pc = pcr(sqSal~., data=nba.t, scale = T, ncomp = 9)
pcr.9pc = pcr(sqSal~., data=nba.t2, scale = T, ncomp = 9)
pcr.9pc = pcr(sqSal~., data=nba.t2, scale = F, ncomp = 9)
summary(pcr.9pc)
pcr.9pc$loadings
predplot(pcr.9pc)
testy <- df17
testy$predSalary <- predict(pcr.9pc,testy)^2
testy$actCluster <- apply(testy[43],2,clus17_18)
testy$predCluster <- apply(testy[44],2,clus17_18)
View(testy)
testy <- df17
testy$predSalary <- predict(pcr.9pc,testy)^2
testy$actCluster <- apply(testy[44],2,clus17_18)
testy <- df17
testy$predSalary <- predict(pcr.9pc,testy)^2
testy$actCluster <- apply(testy[42],2,clus17_18)
testy$predCluster <- apply(testy[44],2,clus17_18)
paste0("Error by cluster: ",sum(abs(test.17$onOff))/nrow(test.17))
paste0("Error by pay: ",sum(abs(test.17$predSalary - test.17$average.salary))/nrow(test.17))
paste0("Error by cluster: ",sum(abs(testy$onOff))/nrow(testy))
#paste0("Error by cluster: ",sum(abs(testy$onOff))/nrow(testy))
paste0("Error by pay: ",sum(abs(testy$predSalary - testy$average.salary))/nrow(testy))
?apply
testy <- df17[]
testy$predSalary <- predict(pcr.9pc,testy)^2
testy$actCluster <- apply(testy[42],2,clus17_18)
testy$predCluster <- apply(testy[45],2,clus17_18)
testy$onOff <- testy$predCluster - testy$actCluster
row.names(testy) <- 1:nrow(testy)
testy <- df17[]
testy$predSalary <- predict(pcr.9pc,testy)^2
testy$actCluster <- apply(testy[42],2,clus17_18)
testy$predCluster <- apply(testy[44],2,clus17_18)
testy <- df17
testy$predSalary <- predict(pcr.9pc,testy)^2
testy$actCluster <- apply(testy[42],2,clus17_18)
testy$predCluster <- apply(testy[44],2,clus17_18)
ncol(df17)
testy <- df17
testy$predSalary <- predict(pcr.9pc,testy)^2
testy$actCluster <- apply(testy[42],2,clus17_18)
testy$predCluster <- apply(testy[44],2,clus17_18)
ncol(df17)
testy <- df17
testy$predSalary <- predict(pcr.9pc,testy)^2
testy[44]
testy$actCluster <- apply(testy[42],2,clus17_18)
testy$predCluster <- apply(testy[44],2,clus17_18)
testy[44]
apply(testy[44],2,function(x) x+1)
apply(unlist(testy[44]),2,function(x) x+1)
dim(testy[44])
dim(testy[43])
apply(testy[44],1,function(x) x+1)
apply(testy[44],1,function(x) x+1)
apply(testy[44],1,function(x) x+1)
apply(testy[44],2,function(x) x+1)
apply(testy[44],2,function(x) x+1)
#apply(testy[44],2,function(x) x+1)
as.matrix(testy[44])
#apply(testy[44],2,function(x) x+1)
as.matrix(as.data.frame(testy[44]))
#apply(testy[44],2,function(x) x+1)
as.matrix(list(testy[44]))
apply(list(testy[44]),2,function(x) x+1)
ncol(df17)
testy <- df17
testy$predSalary <- predict(pcr.9pc,testy)^2
testy[44]
testy$actCluster <- apply(testy[42],2,clus17_18)
testy$predCluster <- apply(testy[44],2,clus17_18)
png("transGauss.png", width = 1000, height = 500)
plot(density(sqrt(df$average.salary),bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (After Transformation)",xlab="Average Salary")
#png("Gauss.png", width = 1000, height = 500)
par(mfrow=c(1,2))
plot(density(df$average.salary,bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (Before Transformation)",xlab="Average Salary")
plot(density(sqrt(df$average.salary),bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (After Transformation)",xlab="Average Salary")
png("Gauss.png", width = 1000, height = 500)
par(mfrow=c(1,2))
plot(density(df$average.salary,bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (Before Transformation)",xlab="Average Salary")
plot(density(sqrt(df$average.salary),bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (After Transformation)",xlab="Average Salary")
png("Gauss.png", width = 1500, height = 750)
par(mfrow=c(1,2))
plot(density(df$average.salary,bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (Before Transformation)",xlab="Average Salary")
plot(density(sqrt(df$average.salary),bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (After Transformation)",xlab="Average Salary")
head(df)
predplot(pcr.9pc)
ncol(df17)
testy <- df17
testy$predSalary <- predict(pcr.9pc,testy)^2
testy[44]
testy$actCluster <- apply(testy[42],2,clus17_18)
testy$predCluster <- apply(testy[44],2,clus17_18)
par(mfrow=c(2,2))
plot(w1)
View(test.17.t)
paste0("Error by cluster: ",sum(abs(testy$onOff))/nrow(testy))
paste0("Error by cluster: ",sum(abs(testy$onOff))/nrow(testy))
#paste0("Error by cluster: ",sum(abs(testy$onOff))/nrow(testy))
paste0("Error by pay: ",sum(abs(testy$predSalary - testy$average.salary))/nrow(testy))
#paste0("Error by cluster: ",sum(abs(testy$onOff))/nrow(testy))
paste0("Error by pay: ",abs(testy$predSalary - testy$average.salary)/nrow(testy))
#paste0("Error by cluster: ",sum(abs(testy$onOff))/nrow(testy))
paste0("Error by pay: ",mean(testy$predSalary - testy$average.salary)
#paste0("Error by cluster: ",sum(abs(testy$onOff))/nrow(testy))
paste0("Error by pay: ",mean(testy$predSalary - testy$average.salary))
#paste0("Error by cluster: ",sum(abs(testy$onOff))/nrow(testy))
paste0("Error by pay: ",mean(abs(testy$predSalary - testy$average.salary)))
paste0("Error by cluster: ",sum(abs(test.17$onOff))/nrow(test.17))
paste0("Error by pay: ",mean(abs(test.17$predSalary - test.17$average.salary)))
sum(abs(test17$predSalary - test17$average.salary))/nrow(test17)
png("model.png", width = 1000, height = 1000)
w1 <- lm(sqrt(average.salary) ~ MP + WS + STL + TS. + G + ORB.,df17)
summary(w1)
vif(w1)
png("regsubsets.png", width = 1000, height = 1000)
bm17s <- regsubsets(sqrt(average.salary) ~ FG + PS.G + FGA + MP + FTA + FT + WS + VORP + TOV + PER + OWS + DRB + GS + BPM + OBPM + DWS + USG. + TRB + STL + WS.48 + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
bm17s.sum <- summary(bm17s)
res.legend <-subsets(bm17s, statistic="adjr2", legend = FALSE, min.size = 3, max.size = 12, main = "Adjusted R^2")
png("diagnostics.png", width = 1000, height = 1000)
par(mfrow=c(2,2))
plot(w1)
png("regsubsets.png", width = 500, height = 500)
bm17s <- regsubsets(sqrt(average.salary) ~ FG + PS.G + FGA + MP + FTA + FT + WS + VORP + TOV + PER + OWS + DRB + GS + BPM + OBPM + DWS + USG. + TRB + STL + WS.48 + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
bm17s.sum <- summary(bm17s)
res.legend <-subsets(bm17s, statistic="adjr2", legend = FALSE, min.size = 3, max.size = 12, main = "Adjusted R^2")
plyr.17.18 <- read.csv("player17_18.csv", stringsAsFactors = F)
View(plyr.17.18)
plyr.17.18 <- read.csv("player17_18.csv", stringsAsFactors = F)
clus18_19 <- function(x) {
perCen <- x / 101000000 # 18-19 projection
ifelse(perCen < 0.02,1,
ifelse(perCen >= 0.02 & perCen < 0.04,2,
ifelse(perCen >= 0.04 & perCen < 0.07,3,
ifelse(perCen >= 0.07 & perCen < 0.10,4,
ifelse(perCen >= 0.10 & perCen < 0.13,5,
ifelse(perCen >= 0.13 & perCen < 0.16,6,
ifelse(perCen >= 0.16 & perCen < 0.19,7,8)))))))
}
final <- plyr.17.18[c(1,6,35,18,23,4,25)]
final$predSalary <- predict(w1,final)^2
final$actCluster <- apply(final[8],2,clus18_19)
final$predCluster <- apply(final[9],2,clus18_19)
final$onOff <- final$predCluster - final$actCluster
row.names(final) <- 1:nrow(final)
View(final)
final <- plyr.17.18[c(1,6,35,18,23,4,25)]
final$predSalary <- predict(w1,final)^2
final$predCluster <- apply(final[8],2,clus18_19)
final$onOff <- final$predCluster - final$actCluster
final <- plyr.17.18[c(1,6,35,18,23,4,25)]
final$predSalary <- predict(w1,final)^2
final$predCluster <- apply(final[8],2,clus18_19)
row.names(final) <- 1:nrow(final)
View(final)
free.agents <- read.csv('2018-fa-list.csv', stringsAsFactors = F)
View(free.agents)
colnames(free.agents)[1] <- "name"
View(free.agents)
colnames(free.agents)[1] <- "fix"
View(free.agents)
newFA <- merge (free.agents, final, by="fix")
View(newFA)
newFA <- merge (free.agents, final, by="fix")
View(newFA)
View(newFA)
lebron <- final[115,]
View(lebron)
newFA <- merge (free.agents, final, by="fix")
newFA <- rbind (newFA, lebron)
View(newFA)
PG <- final[84,]
newFA <- rbind(newFA,PG)
row.names(newFA) <- 1:nrow(newFA)
plyr.17.18 <- read.csv("player17_18.csv", stringsAsFactors = F)
final <- plyr.17.18[c(1,6,35,18,23,4,25)]
final$predSalary <- predict(w1,final)^2
final$predCluster <- apply(final[8],2,clus18_19)
row.names(final) <- 1:nrow(final)
free.agents <- read.csv('2018-fa-list.csv', stringsAsFactors = F)
colnames(free.agents)[1] <- "fix"
View(free.agents)
lebron <- final[115,]
#View(lebron)
lebron <- final[127,]
#View(lebron)
newFA <- merge (free.agents, final, by="fix")
newFA <- rbind (newFA, lebron)
#View(newFA)
PG <- final[91,]
newFA <- rbind(newFA,PG)
row.names(newFA) <- 1:nrow(newFA)
png("regsubsets.png", width = 500, height = 500)
bm17s <- regsubsets(sqrt(average.salary) ~ FG + PS.G + FGA + MP + FTA + FT + WS + VORP + TOV + PER + OWS + DRB + GS + BPM + OBPM + DWS + USG. + TRB + STL + WS.48 + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
bm17s.sum <- summary(bm17s)
res.legend <-subsets(bm17s, statistic="adjr2", legend = FALSE, min.size = 3, max.size = 12, main = "Adjusted R^2")
png("regsubsets.png", width = 500, height = 750)
bm17s <- regsubsets(sqrt(average.salary) ~ FG + PS.G + FGA + MP + FTA + FT + WS + VORP + TOV + PER + OWS + DRB + GS + BPM + OBPM + DWS + USG. + TRB + STL + WS.48 + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
bm17s.sum <- summary(bm17s)
res.legend <-subsets(bm17s, statistic="adjr2", legend = FALSE, min.size = 3, max.size = 12, main = "Adjusted R^2")
View(newFA)
View(test.17.t)
#install.packages("pls")
library(ggplot2)
library(ISLR)
library(readr)
plot(out.pc)
predplot(pcr.9pc)
pcr.9pc = pcr(sqSal~., data=nba.t, scale = T, ncomp = 9)
set.seed(42) # for cross validation
library(pls)
pcr.fit = pcr(sqSal~., data=nba.t, scale = F, validation = "CV")
coefplot(pcr.9pc)
write.csv(df17, file = 'mega-2017-norooks.csv')
setwd("~/Documents/FA/variable_selection")
ls
write.csv(df17, file = 'mega-2017-norooks.csv')
plot(density(sqrt(df17$WS),bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (Before Transformation)",xlab="Average Salary")
View(df17)
plot(density(sqrt(df17$WS),bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (Before Transformation)",xlab="Average Salary")
plot(density(df17$WS,bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (Before Transformation)",xlab="Average Salary")
any(is.na(df17$WS))
plot(density(log(df17$WS),bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (Before Transformation)",xlab="Average Salary")
plot(density(log(na.omit(df17$WS)),bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (Before Transformation)",xlab="Average Salary")
plot(density(log(df17$WS),bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (Before Transformation)",xlab="Average Salary")
df17$WS
log(df17$WS)
df17$WS
log(1)
log(df$WS[1:5])
log(df$WS[1:10])
log(df$WS[1:20])
log(df$WS[1:50])
log(df$WS[1:40])
log(df$WS[1:30])
log(df$WS[1:25])
log(df$WS[1:20])
log(df$WS[1:22])
log(df$WS[1:23])
log(df$WS[1:24])
df$WS[24]
df$WS
df17$WS
df17$WS[24]
df17$WS[23]
df17$WS[25]
log(df17$WS)
log(df17$WS[1:24])
log(df17$WS[1:25])
log(df17$WS[1:30])
df17$WS
log(df17$WS[1:27]
log(df17$WS[1:27])
log(df17$WS[1:28])
log(df17$WS[1:50])
log(df17$WS[1:100])
log(df17$WS[1:150])
log(df17$WS[1:196])
log(df17$WS[1:180])
log(df17$WS[1:174])
log(df17$WS[1:175])
df17$WS[1:175]
df17$WS
df17$WS[175] = 0
df17$WS
plot(density(log(df17$WS),bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (Before Transformation)",xlab="Average Salary")
plot(density(sqrt(df17$WS),bw="SJ",kern="gaussian"),type="l",main="Gaussian
kernel density estimate (Before Transformation)",xlab="Average Salary")
ws.bm <- regsubsets(sqrt(WS) ~ FG + PS.G + FGA + MP + FTA + FT + VORP + TOV + PER + OWS + DRB + GS + BPM + OBPM + DWS + USG. + TRB + STL + WS.48 + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
ws.bm.sum <- summary(ws.bm)
res.legend <-subsets(ws.bm, statistic="adjr2", legend = FALSE, min.size = 3, max.size = 12, main = "Adjusted R^2")
ws.bm <- regsubsets(sqrt(WS) ~ FG + PS.G + FGA + MP + FTA + FT + VORP + TOV + PER + DRB + GS + BPM + OBPM + USG. + TRB + STL + WS.48 + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
ws.bm.sum <- summary(ws.bm)
res.legend <-subsets(ws.bm, statistic="adjr2", legend = FALSE, min.size = 3, max.size = 12, main = "Adjusted R^2")
ws.bm <- regsubsets(sqrt(WS) ~ FG + PS.G + FGA + MP + FTA + FT + VORP + TOV + PER + DRB + GS + BPM + OBPM + USG. + TRB + STL + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
ws.bm.sum <- summary(ws.bm)
res.legend <-subsets(ws.bm, statistic="adjr2", legend = FALSE, min.size = 3, max.size = 12, main = "Adjusted R^2")
which(ws.bm.sum$which[8,] == TRUE)
df17c <- read.csv('mega-2017_clustering.csv', stringsAsFactors = F)
View(df17c)
df17c <- read.csv('mega-2017_clustering.csv', stringsAsFactors = F)
df17c <- df17c[c(2,14)]
View(df17c)
df17c <- read.csv('mega-2017_clustering.csv', stringsAsFactors = F)
df17c <- df17c[c(2,14)]
df17c <- merge(df17c, df17, by = 'fix')
View(df17c)
clus.bm <- regsubsets(sqrt(average.salary) ~ over_under + WS + OWS + DWS + FG + PS.G + FGA + MP + FTA + FT + VORP + TOV + PER + DRB + GS + BPM + OBPM + USG. + TRB + STL + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
clus.bm <- regsubsets(sqrt(average.salary) ~ over_under + WS + OWS + DWS + FG + PS.G + FGA + MP + FTA + FT + VORP + TOV + PER + DRB + GS + BPM + OBPM + USG. + TRB + STL + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17c, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
clus.bm.sum <- summary(clus.bm)
res.legend <-subsets(clus.bm, statistic="adjr2", legend = FALSE, min.size = 3, max.size = 12, main = "Adjusted R^2")
which(clus.bm$which[8,] == T)
which(clus.bm.sum$which[8,] == T)
c1 <- lm(sqrt(average.salary) ~ over_under + WS + FGA + MP + FT + PER + G + FTr, df17c)
summary(c1)
vif(c1)
which(clus.bm.sum$which[7,] == T)
c1 <- lm(sqrt(average.salary) ~ over_under + WS + FGA + MP + FT + G + FTr, df17c)
summary(c1)
vif(c1)
which(clus.bm.sum$which[6,] == T)
c1 <- lm(sqrt(average.salary) ~ over_under + WS + FGA + MP + OBPM + G, df17c)
summary(c1)
vif(c1)
View(plyr.17.18)
df17c <- read.csv('mega-2017_clustering.csv', stringsAsFactors = F)
df17c <- df17c[c(2,13)]
df17c <- merge(df17c, df17, by = 'fix')
View(df17c)
df17c <- read.csv('mega-2017_clustering.csv', stringsAsFactors = F)
df17c <- df17c[c(2,12)]
df17c <- merge(df17c, df17, by = 'fix')
View(df17c)
clus.bm <- regsubsets(sqrt(average.salary) ~ perf_cluster + WS + OWS + DWS + FG + PS.G + FGA + MP + FTA + FT + VORP + TOV + PER + DRB + GS + BPM + OBPM + USG. + TRB + STL + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17c, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
clus.bm.sum <- summary(clus.bm)
res.legend <-subsets(clus.bm, statistic="adjr2", legend = FALSE, min.size = 3, max.size = 12, main = "Adjusted R^2")
which(clus.bm.sum$which[6,] == T)
clus.bm <- regsubsets(sqrt(average.salary) ~ perf_cluster + WS + OWS + DWS + FG + PS.G + FGA + MP + FTA + FT + VORP + TOV + PER + DRB + GS + BPM + OBPM + USG. + TRB + STL + AST + PF + ORB + TS. + AST. + BLK + FG. + G + DRB. + eFG. + FTr + DBPM + TRB. + FT. + STL. + ORB. + BLK. + TOV., data = df17c, nbest=1, nvmax=NULL, force.in=NULL, force.out=NULL,method="exhaustive")
clus.bm.sum <- summary(clus.bm)
res.legend <-subsets(clus.bm, statistic="adjr2", legend = FALSE, min.size = 3, max.size = 12, main = "Adjusted R^2")
#png("diagnostics.png", width = 1000, height = 1000)
par(mfrow=c(2,2))
plot(w1)
png("diagnostics.png", width = 500, height = 750)
par(mfrow=c(2,2))
plot(w1)
png("diagnostics.png", width = 750, height = 500)
par(mfrow=c(2,2))
plot(w1)
newFA
View(newFA)
View(sort(newFA,decreasing = T))
View(sort(newFA$predCluster,decreasing = T))
View(sort(newFA, by = predCluster,decreasing = T))
View(final[order(predCluster)])
View(final[order(final$predCluster),])
View(final[-order(final$predCluster),])
View(final[order(-final$predCluster),])
View(newFA[order(-newFA$predCluster),])
sortDf <- newFA[order(-newFA$predCluster),]
row.names(sortDf) <- 1:nrow(sortDf)
View(sortDf)
library(knitr)
kable(sortDf, format = "latex")
library(knitr)
View(kable(sortDf, format = "latex"))
library(knitr)
print(kable(sortDf, format = "latex"))
sortDf[1:5]
sortDf[c(1,8,9)]
sortDf[c(1,8,9)][1:5,]
View(sortDf[c(1,8,9)][1:5,])
library(knitr)
png('table.png', height = 250, width = 250)
kable(sortDf[c(1,8,9)][1:5,], format = "latex")
library(knitr)
#png('table.png', height = 250, width = 250)
kable(head(sortDf[c(1,8,9)]), format = "latex")
kable(head(sortDf[c(1,8,9)]), format = "latex")
library(knitr)
#png('table.png', height = 250, width = 250)
print(kable(head(sortDf[c(1,8,9)]), format = "latex"))
library(knitr)
png('table.png', height = 250, width = 250)
print(kable(head(sortDf[c(1,8,9)]), format = "latex"))
